{
  "framework": "django",
  "language": "Python",
  "latest_version": "5",
  "ai_features": {
    "default_project_types": ["Web Application", "REST API", "Admin Dashboard"],
    "core_features": [
      "Django ORM",
      "Django Templates", 
      "Django Forms",
      "Django Admin",
      "Django REST Framework",
      "Authentication System",
      "Celery Tasks"
    ],
    "architecture_patterns": {
      "mvt_pattern": "Follow Django MVT (Model-View-Template) with Models for data, Views for logic, Templates for presentation",
      "app_structure": "Use Django apps for modular organization of related functionality",
      "service_layer": "Use Service classes for complex business logic to keep views thin",
      "repository_pattern": "Consider custom QuerySets and Managers for data access patterns",
      "validation": "Utilize Django Forms and Serializers for input validation",
      "orm_optimization": "Leverage Django ORM relationships and query optimization techniques"
    },
    "framework_patterns_template": "\n**Django Patterns:**\n- Models: Define data structure and business logic with Django ORM\n- Views: Handle HTTP requests and responses (Function-based or Class-based)\n- Templates: Render HTML with Django template engine\n- Forms: Handle user input validation and rendering\n- Admin: Automatic admin interface for models\n- URLs: URL routing and pattern matching\n- Middleware: Request/response processing pipeline\n- Signals: Decoupled event handling\n- Management Commands: Custom Django commands\n- Serializers: API data transformation (DRF)\n",
    "technical_stack": [
      "Database (PostgreSQL/MySQL)",
      "Redis (caching/sessions/celery)",
      "Celery (background tasks)",
      "File Storage (Local/S3)",
      "Email Service (SMTP/API)"
    ],
    "project_analysis_keywords": {
      "api": "REST API",
      "crud": "CRUD Application", 
      "dashboard": "Admin Dashboard",
      "ecommerce": "E-commerce Platform",
      "blog": "Content Management System",
      "cms": "Content Management System",
      "crm": "Customer Relationship Management"
    }
  },
  "development_context": {
    "package_manager": "pip",
    "structure": {
      "source_root": "src/",
      "settings_dir": "src/config/",
      "apps_dir": "src/apps/",
      "templates_dir": "src/templates/",
      "static_dir": "src/static/",
      "media_dir": "src/media/",
      "requirements_file": "src/requirements.txt",
      "tests_dir": "src/tests/"
    },
    "commands": {
      "install_dependencies": "pip install -r requirements.txt",
      "run_migrations": "python manage.py migrate",
      "create_migration": "python manage.py makemigrations",
      "create_app": "python manage.py startapp {name}",
      "create_superuser": "python manage.py createsuperuser",
      "run_tests": "python manage.py test",
      "serve_dev": "python manage.py runserver",
      "collect_static": "python manage.py collectstatic",
      "shell": "python manage.py shell"
    },
    "docker": {
      "web_container": "web",
      "database_container": "postgres",
      "redis_container": "redis",
      "worker_container": "worker",
      "working_directory": "/app"
    },
    "patterns": {
      "models": [
        "Models should inherit from django.db.models.Model",
        "Use appropriate field types for data validation",
        "Define string representation with __str__ method",
        "Use Meta class for model configuration"
      ],
      "views": [
        "Use Class-Based Views (CBVs) for common patterns",
        "Use Function-Based Views (FBVs) for custom logic",
        "Return HttpResponse objects or use shortcuts like render()",
        "Handle HTTP methods appropriately (GET, POST, etc.)"
      ],
      "forms": [
        "Use Django Forms for user input validation",
        "Use ModelForm for model-based forms",
        "Implement custom validation with clean_* methods",
        "Use Django Crispy Forms for better form rendering"
      ],
      "urls": [
        "Use path() function for URL patterns",
        "Include app URLs in main urlconf",
        "Use named URLs for reverse lookups",
        "Group related URLs in app-specific url files"
      ]
    },
    "best_practices": [
      "Use Django's built-in validation and security features",
      "Implement proper error handling and logging",
      "Use Django's authentication and authorization system",
      "Follow PEP 8 style guide for Python code",
      "Use environment variables for configuration",
      "Implement proper database relationships",
      "Use Django's testing framework for comprehensive tests",
      "Keep business logic in models and services, not views"
    ],
    "environment": {
      "required_env_vars": [
        "SECRET_KEY", "DEBUG", "DATABASE_URL", "REDIS_URL",
        "ALLOWED_HOSTS", "DJANGO_SETTINGS_MODULE"
      ],
      "development_tools": [
        "Django Debug Toolbar",
        "Django Extensions",
        "iPython/iPDB (debugging)",
        "pytest-django (testing)"
      ]
    },
    "troubleshooting": {
      "migration_issues": "Check for conflicting migrations: python manage.py showmigrations",
      "static_files": "Collect static files: python manage.py collectstatic",
      "database_connection": "Check DATABASE_URL and ensure PostgreSQL is running",
      "import_errors": "Check PYTHONPATH and Django app configuration"
    },
    "code_templates": {
      "model": "from django.db import models\n\nclass {ClassName}(models.Model):\n    name = models.CharField(max_length=100)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    class Meta:\n        verbose_name = '{ClassName}'\n        verbose_name_plural = '{ClassName}s'\n    \n    def __str__(self):\n        return self.name",
      "view": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef {function_name}(request):\n    context = {}\n    return render(request, 'template.html', context)"
    }
  },
  "mcp_config": {
    "servers": {
      "atempo-django": {
        "command": "node",
        "args": ["ai/mcp-server/index.js"],
        "cwd": ".",
        "env": {
          "NODE_ENV": "development"
        }
      }
    }
  }
}
EOF < /dev/null